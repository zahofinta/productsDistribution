@model ProductsDistribution.Models.InputModels.ProductInputEditModel

@{
    ViewBag.Title = "AddNewProduct";
}



<h2>EditProduct</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>ProductInputEditModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.product_name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.product_name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.product_name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.product_description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.product_description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.product_description, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
                @Html.LabelFor(model => model.cut, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.cut, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.cut, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.cuts, "Разфасовка :", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.ValidationMessageFor(model => model.selected_cut, "", new { @class = "text-danger" })

                @Html.DropDownListFor(m => m.selected_cut, Model.cuts, "", new { @id = "cut" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.weight, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.weight, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.weight, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.volume, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.volume, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.volume, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
                @Html.LabelFor(model => model.price, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.price, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.price, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.units, "Мерна единица :", htmlAttributes: new { @class = "control-label col-md-2" })

            <div class="col-md-10" id="subcategories">

                @Html.DropDownListFor(m => m.selected_unit, Model.units, "", new { @id = "selectedUnit" })


                @Html.ValidationMessageFor(model => model.selected_unit, "", new { @class = "text-danger" })

            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.durability, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.durability, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.durability, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.other, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.other, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.other, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.parent_categories, "Категория :", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.ValidationMessageFor(model => model.selected_ParentCategory, "", new { @class = "text-danger" })

                @Html.DropDownListFor(m => m.selected_ParentCategory, Model.parent_categories,"", new { @id = "ddlParentCategory" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.child_categories, "Подкатегория :", htmlAttributes: new { @class = "control-label col-md-2" })

            <div class="col-md-10" id="subcategories">

                @Html.DropDownListFor(m => m.selected_ChildCategory, Model.child_categories, new { @id = "ddlChildCategory1" })


                @Html.ValidationMessageFor(model => model.selected_ChildCategory, "", new { @class = "text-danger" })

            </div>
        </div>
        <p id="test"></p>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Добави" class="btn btn-default" id="submitButton" />
            </div>
        </div>
    </div>
}


<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section scripts {
    <script src="@Url.Content("~/Scripts/GenerateChildCategoriesDynamicallyEdit.js")"></script>

}